package com.dennytech.wiiivideo.playlist;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import android.content.Intent;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ListView;import com.dennytech.common.adapter.BasicAdapter;import com.dennytech.common.service.dataservice.mapi.CacheType;import com.dennytech.common.service.dataservice.mapi.MApiRequest;import com.dennytech.common.service.dataservice.mapi.MApiRequestHandler;import com.dennytech.common.service.dataservice.mapi.MApiResponse;import com.dennytech.common.service.dataservice.mapi.impl.BasicMApiRequest;import com.dennytech.wiiivideo.R;import com.dennytech.wiiivideo.app.MYActivity;import com.dennytech.wiiivideo.data.Video;import com.dennytech.wiiivideo.parser.UserPlaylistParseHelper;import com.dennytech.wiiivideo.videolist.view.VideoListItem;import com.umeng.analytics.MobclickAgent;public class UserPlaylistActivity extends MYActivity implements		MApiRequestHandler, OnItemClickListener {	protected MApiRequest request;	protected Task task;	protected ListView listView;	protected Adapter adapter;		protected String url;	protected UserPlaylistParseHelper helper;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);				url = getIntent().getStringExtra("url");				setContentView(R.layout.layout_list);		listView = (ListView) findViewById(R.id.list);		adapter = new Adapter();		listView.setAdapter(adapter);		listView.setOnItemClickListener(this);	}	@Override	public void onItemClick(AdapterView<?> parent, View view, int position,			long id) {		Object item = parent.getItemAtPosition(position);		if (item instanceof Video) {			playVideo((Video) item);			HashMap<String, String> map = new HashMap<String, String>();			map.put("__ct__", String.valueOf(position));			map.put("title", String.valueOf(((Video) item).title));			MobclickAgent.onEvent(this, "video_list_item_click", map);		}	}	protected void playVideo(Video v) {		String url = "http://v.youku.com/player/getM3U8/vid/" + v.id				+ "/type/mp4/v.m3u8";		Intent intent = new Intent(Intent.ACTION_VIEW,				Uri.parse("wvideo://player?url=" + url));		startActivity(intent);	}	class Task extends AsyncTask<String, Void, List<Video>> {		@Override		protected List<Video> doInBackground(String... params) {			helper = UserPlaylistParseHelper.instance();			List<Video> videos = helper.parseByDefault(params[0]);			return videos;		}		@Override		protected void onPostExecute(List<Video> result) {			adapter.appendData(result);		}	}	class Adapter extends BasicAdapter {		protected List<Video> videoList = new ArrayList<Video>();		protected int page = 1;		protected String errorMsg;		protected boolean isLoading;		private boolean isEnd;		public void appendData(List<Video> videos) {			if (videos == null) {				setError("数据为空");			} else {				if (videos.size() == 0) {					isEnd = true;				} else {					videoList.addAll(videos);				}				notifyDataSetChanged();			}		}		public void reset() {			videoList.clear();			page = 1;			errorMsg = null;			isLoading = false;			isEnd = false;			notifyDataSetChanged();		}		public void setError(String error) {			errorMsg = error;			notifyDataSetChanged();		}		@Override		public int getCount() {			if (isEnd) {				return videoList.size();			}			return videoList.size() + 1;		}		@Override		public Object getItem(int position) {			if (position < videoList.size()) {				return videoList.get(position);			}						return errorMsg == null ? LOADING : ERROR;		}		@Override		public long getItemId(int position) {			return position;		}		@Override		public View getView(int position, View convertView, ViewGroup parent) {			Object item = getItem(position);			if (item == LOADING) {				if (task != null) {					task.cancel(true);				}				if (!isLoading) {					requestData();					isLoading = true;				}				return getLoadingView(parent, convertView);			} else if (item == ERROR) {				return getFailedView(errorMsg, new OnClickListener() {					@Override					public void onClick(View v) {						errorMsg = null;						notifyDataSetChanged();					}				}, parent, convertView);			} else {				return createItemViewWithData(position, item, convertView);			}		}		protected void requestData() {			if (request != null) {				mapiService().abort(request, UserPlaylistActivity.this, true);			}			StringBuilder sb = new StringBuilder(url);			sb.append("_page_").append(page);			request = BasicMApiRequest.mapiGet(sb.toString(), CacheType.NORMAL,					null);			mapiService().exec(request, UserPlaylistActivity.this);			page += 1;		}		protected View createItemViewWithData(int position, Object item,				View convertView) {			View view = convertView;			if (!(view instanceof VideoListItem)) {				view = LayoutInflater.from(UserPlaylistActivity.this).inflate(						R.layout.layout_video_list_item, null);			}			((VideoListItem) view).setData((Video) item);			return view;		}	}	@Override	public void onRequestStart(MApiRequest req) {	}	@Override	public void onRequestProgress(MApiRequest req, int count, int total) {	}	@Override	public void onRequestFinish(MApiRequest req, MApiResponse resp) {		if (resp.result() instanceof String) {			if (task != null) {				task.cancel(true);			}			task = new Task();			task.execute((String) resp.result());			adapter.isLoading = false;		}	}	@Override	public void onRequestFailed(MApiRequest req, MApiResponse resp) {		adapter.setError(resp.message().getErrorMsg());	}	public void reset() {		adapter.reset();	}}