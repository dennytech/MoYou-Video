package com.dennytech.wiiivideo.playlist;import java.util.ArrayList;import java.util.List;import android.os.AsyncTask;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ListView;import com.dennytech.common.adapter.BasicAdapter;import com.dennytech.common.service.dataservice.mapi.CacheType;import com.dennytech.common.service.dataservice.mapi.MApiRequest;import com.dennytech.common.service.dataservice.mapi.MApiRequestHandler;import com.dennytech.common.service.dataservice.mapi.MApiResponse;import com.dennytech.common.service.dataservice.mapi.impl.BasicMApiRequest;import com.dennytech.wiiivideo.R;import com.dennytech.wiiivideo.app.MYFragment;import com.dennytech.wiiivideo.app.SearchPage;import com.dennytech.wiiivideo.data.Playlist;import com.dennytech.wiiivideo.data.PlaylistList;import com.dennytech.wiiivideo.parser.SearchPlaylistParseHelper;import com.dennytech.wiiivideo.playlist.view.PlaylistListItem;import com.dennytech.wiiivideo.videolist.view.VideoListItem;public class PlaylistFragment extends MYFragment implements		OnItemClickListener, MApiRequestHandler, SearchPage {	protected String url;	protected String keyword;	protected MApiRequest request;	protected Task task;	protected ListView listView;	protected Adapter adapter;	protected SearchPlaylistParseHelper helper;		@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);				url = getArguments().getString("url");		keyword = getArguments().getString("keyword");	}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		View view = inflater.inflate(R.layout.layout_list, null);		listView = (ListView) view.findViewById(R.id.list);		adapter = createAdapter();		listView.setAdapter(adapter);		listView.setOnItemClickListener(this);		return view;	}		@Override	public void onDestroy() {		if (request != null) {			mapiService().abort(request, this, true);		}		if (task != null) {			task.cancel(true);		}		if (helper != null) {			helper.close();		}		super.onDestroy();	}	@Override	public void onItemClick(AdapterView<?> parent, View view, int position,			long id) {	}	protected Adapter createAdapter() {		return new Adapter();	}	protected Task createTask() {		return new Task();	}	class Adapter extends BasicAdapter {		List<Playlist> plList = new ArrayList<Playlist>();		protected int page = 1;		protected String errorMsg;		protected boolean isLoading;		public void appendData(List<Playlist> list) {			plList.addAll(list);			if (list == null) {				setError("数据为空");			} else {				list.addAll(list);				notifyDataSetChanged();			}		}		public void reset() {			plList.clear();			notifyDataSetChanged();		}		public void setError(String error) {			errorMsg = error;			notifyDataSetChanged();		}		@Override		public int getCount() {			return plList.size() + 1;		}		@Override		public Object getItem(int position) {			if (position < plList.size()) {				return plList.get(position);			}			return errorMsg == null ? LOADING : ERROR;		}		@Override		public long getItemId(int position) {			return position;		}		@Override		public View getView(int position, View convertView, ViewGroup parent) {			Object item = getItem(position);			if (item == LOADING) {				if (task != null) {					task.cancel(true);				}				if (!isLoading) {					requestData();					isLoading = true;				}				return getLoadingView(parent, convertView);			} else if (item == ERROR) {				return getFailedView(errorMsg, new OnClickListener() {					@Override					public void onClick(View v) {						errorMsg = null;						notifyDataSetChanged();					}				}, parent, convertView);			} else {				return createItemViewWithData(position, item, convertView);			}		}		protected void requestData() {			if (request != null) {				mapiService().abort(request, PlaylistFragment.this, true);			}			StringBuilder sb = new StringBuilder(url);			if (keyword != null) {				sb.append("_q_").append(keyword);			}			sb.append("_page_").append(page);			request = BasicMApiRequest.mapiGet(sb.toString(), CacheType.NORMAL,					null);			mapiService().exec(request, PlaylistFragment.this);			page += 1;		}		protected View createItemViewWithData(int position, Object item,				View convertView) {			View view = convertView;			if (!(view instanceof VideoListItem)) {				view = getLayoutInflater(getArguments()).inflate(						R.layout.layout_playlist_list_item, null);			}			((PlaylistListItem) view).setData((Playlist) item);			return view;		}	}	class Task extends AsyncTask<String, Void, PlaylistList> {		@Override		protected PlaylistList doInBackground(String... params) {			helper = SearchPlaylistParseHelper.instance();			PlaylistList list = helper.parseByDefault(params[0]);			return list;		}		@Override		protected void onPostExecute(PlaylistList result) {			adapter.appendData(result.list);		}	}	@Override	public void onRequestStart(MApiRequest req) {	}	@Override	public void onRequestProgress(MApiRequest req, int count, int total) {	}	@Override	public void onRequestFinish(MApiRequest req, MApiResponse resp) {		if (resp.result() instanceof String) {			if (task != null) {				task.cancel(true);			}			task = createTask();			task.execute((String) resp.result());			adapter.isLoading = false;		}	}	@Override	public void onRequestFailed(MApiRequest req, MApiResponse resp) {		adapter.setError(resp.message().getErrorMsg());	}	public void reset() {		adapter.reset();	}	@Override	public void setKeyword(String kw) {		if (kw != null && !kw.equals(this.keyword)) {			this.keyword = kw;			reset();		}	}}